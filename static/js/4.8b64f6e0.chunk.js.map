{"version":3,"sources":["utilities/validators/validators.js","components/Login/Login.jsx"],"names":["max","required","value","maxLength35","length","undefined","minLength","min","minLength2","minLength4","email","test","validate","validateEmail","LoginReduxForm","reduxForm","form","captchaUrl","handleSubmit","error","submitting","onSubmit","Field","type","placeholder","label","name","component","Input","className","style","checkboxItem","formCommonError","src","alt","buttonItem","disabled","connect","state","authReducer","isAuth","login","to","values","password","rememberMe","captcha"],"mappings":"uHAOkBA,E,6DALLC,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAKEC,GAFKH,EAEmB,GAFZ,SAAAE,GAAK,OAC1BA,GAASA,EAAME,OAASJ,EAAxB,kBAAyCA,EAAzC,4BAAoEK,IAGlEC,EAAY,SAAAC,GAAG,OAAI,SAAAL,GAAK,OAC1BA,GAASA,EAAME,OAASG,EAAxB,kBAAyCA,EAAzC,4BAAoEF,IAC3DG,EAAaF,EAAU,GACvBG,EAAaH,EAAU,GAEvBI,EAAQ,SAAAR,GAAK,OACtBA,IAAU,4CAA4CS,KAAKT,GACrD,6BACAG,GAmBJO,GAbgB,SAACL,EAAKP,IAWIa,CAAc,EAAG,IAEhC,SAACN,EAAKP,GAAN,OAAc,SAAAE,GAC3B,OAAKA,EAEMA,EAAME,OAASG,EAChB,WAAN,OAAkBA,EAAlB,uBACOL,EAAME,OAASJ,EAChB,WAAN,OAAkBA,EAAlB,4BADG,EAHK,uB,GAQUY,EAAS,EAAG,GACXA,EAAS,EAAG,I,uBCDjCE,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAtCL,SAAC,GAAmD,IAAlDE,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAClD,OACG,0BAAMC,SAAUH,GACb,6BACG,kBAACI,EAAA,EAAD,CAAOC,KAAK,QAAQC,YAAY,QAAQC,MAAM,QAAQC,KAAM,QACrDC,UAAWC,IAAOhB,SAAU,CAACX,EAAUE,EAAaK,EAAYE,MAE1E,6BACG,kBAACY,EAAA,EAAD,CAAOC,KAAK,WAAWC,YAAY,WAAWC,MAAM,WAAWC,KAAM,WAC9DC,UAAWC,IAAOhB,SAAU,CAACX,EAAUE,EAAaM,MAE9D,yBAAKoB,UAAWC,IAAMC,cACnB,kBAACT,EAAA,EAAD,CAAOC,KAAK,WAAWG,KAAM,aAAcC,UAAW,UADzD,eAIGR,GAAS,yBAAKU,UAAWC,IAAME,iBAC3B,8BACIb,IAIVF,GAAc,yBAAKgB,IAAKhB,EAAYiB,IAAI,KAEtCjB,GAAc,kBAACK,EAAA,EAAD,CAAOC,KAAK,OACLC,YAAY,UACZE,KAAK,UACLC,UAAWC,IACXhB,SAAU,CAACX,KAEnC,yBAAK4B,UAAWC,IAAMK,YACnB,4BAAQZ,KAAK,SAASa,SAAUhB,GAC5BA,EAAa,aAAe,eA+B7BiB,uBAJS,SAACC,GAAD,MAAY,CACjCrB,WAAYqB,EAAMC,YAAYtB,WAC9BuB,OAAQF,EAAMC,YAAYC,UAEW,CAACC,WAA1BJ,EAtBD,SAAC,GAAiC,IAAhCI,EAA+B,EAA/BA,MAAOD,EAAwB,EAAxBA,OAAQvB,EAAgB,EAAhBA,WAU5B,OAAIuB,EACM,kBAAC,IAAD,CAAUE,GAAI,aAEjB,yBAAKb,UAAWC,IAAMW,OAC1B,kBAAC3B,EAAD,CAAgBO,SAbF,SAACsB,GACfF,EACGE,EAAOjC,MACPiC,EAAOC,SACPD,EAAOE,WACPF,EAAOG,UAQ0B7B,WAAYA","file":"static/js/4.8b64f6e0.chunk.js","sourcesContent":["\r\n//to Form-Redux======================================\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nconst maxLength = max => value =>\r\n    value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\nexport const maxLength35 = maxLength(35);\r\n\r\nconst minLength = min => value =>\r\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\r\nexport const minLength2 = minLength(2);\r\nexport const minLength4 = minLength(4);\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined\r\n\r\n\r\n\r\n//to Formik=====================================\r\n\r\nconst validateEmail = (min, max) => value => {\r\n    if (!value) {\r\n        return  'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        return 'Invalid email address';\r\n    } else if (value.length < min) {\r\n        return `Must be ${min} characters or more`\r\n    } else if (value.length > max) {\r\n        return `Must be ${max} characters or less`\r\n    }\r\n}\r\nexport const validateEmail235 = validateEmail(2, 35);\r\n\r\nconst validate = (min, max) => value => {\r\n    if (!value) {\r\n        return  'Field is required';\r\n    } else if (value.length < min) {\r\n        return `Must be ${min} characters or more`\r\n    } else if (value.length > max) {\r\n        return `Must be ${max} characters or less`\r\n    }\r\n}\r\n\r\nexport const validate28 = validate(2, 8);\r\nexport const validate835 = validate(8, 35);\r\n","import React from \"react\";\r\nimport style from \"./Login.module.sass\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {email, maxLength35, minLength2, minLength4, required} from \"../../utilities/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst LoginForm = ({captchaUrl, handleSubmit, error, submitting}) => {\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <div>\r\n            <Field type=\"email\" placeholder='email' label=\"email\" name={\"email\"}\r\n                   component={Input} validate={[required, maxLength35, minLength2, email]}/>\r\n         </div>\r\n         <div>\r\n            <Field type=\"password\" placeholder='password' label=\"password\" name={\"password\"}\r\n                   component={Input} validate={[required, maxLength35, minLength4]}/>\r\n         </div>\r\n         <div className={style.checkboxItem}>\r\n            <Field type=\"checkbox\" name={\"rememberMe\"} component={\"input\"}/>Remember Me\r\n         </div>\r\n         {\r\n            error && <div className={style.formCommonError}>\r\n                <span>\r\n                   {error}\r\n                </span>\r\n            </div>\r\n         }\r\n         {captchaUrl && <img src={captchaUrl} alt=\"\"/>}\r\n         {\r\n            captchaUrl && <Field type=\"text\"\r\n                                 placeholder='Captcha'\r\n                                 name=\"captcha\"\r\n                                 component={Input}\r\n                                 validate={[required]}/>\r\n         }\r\n         <div className={style.buttonItem}>\r\n            <button type=\"submit\" disabled={submitting}>\r\n               {submitting ? 'Loading...' : 'Log In'}\r\n            </button>\r\n         </div>\r\n      </form>\r\n   )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm);\r\n\r\nconst Login = ({login, isAuth, captchaUrl}) => {\r\n   const addLogin = (values) => {\r\n      login(\r\n         values.email,\r\n         values.password,\r\n         values.rememberMe,\r\n         values.captcha\r\n      );\r\n   }\r\n\r\n   if (isAuth) {\r\n      return <Redirect to={\"/profile\"}/>\r\n   }\r\n   return <div className={style.login}>\r\n      <LoginReduxForm onSubmit={addLogin} captchaUrl={captchaUrl}/>\r\n   </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n   captchaUrl: state.authReducer.captchaUrl,\r\n   isAuth: state.authReducer.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}