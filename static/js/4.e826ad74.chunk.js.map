{"version":3,"sources":["components/Login/Login.module.sass","utilities/validators/validators.js","components/Login/LoginFormik.jsx"],"names":["module","exports","max","minLength","min","value","length","undefined","validate","validateEmail","required","LoginForm","captchaUrl","onSubmit","errorMessage","className","style","login","initialValues","email","password","rememberMe","captcha","values","resetForm","setTimeout","validationSchema","Yup","shape","props","isSubmitting","name","placeholder","component","CustomInput","type","checkboxItem","label","id","src","alt","formCommonError","buttonItem","disabled","connect","state","isAuth","authReducer","resetError","useEffect","to"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,0BAA0B,aAAe,4BAA4B,gBAAkB,+BAA+B,UAAY,yBAAyB,MAAQ,qBAAqB,cAAgB,+B,4CCMlPC,E,kFAIZC,GAJYD,EAEmB,GAEnB,SAAAE,GAAG,OAAI,SAAAC,GAAK,OAC1BA,GAASA,EAAMC,OAASF,EAAxB,kBAAyCA,EAAzC,4BAAoEG,KA0BlEC,GAzBoBL,EAAU,GACVA,EAAU,GAWd,SAACC,EAAKF,IAWIO,CAAc,EAAG,IAEhC,SAACL,EAAKF,GAAN,OAAc,SAAAG,GAC3B,OAAKA,EAEMA,EAAMC,OAASF,EAChB,WAAN,OAAkBA,EAAlB,uBACOC,EAAMC,OAASJ,EAChB,WAAN,OAAkBA,EAAlB,4BADG,EAHK,uBAeHQ,GAPaF,EAAS,EAAG,GACXA,EAAS,EAAG,IAMf,SAAAH,GAEpB,IAAKA,EACD,MAAO,a,QC/CTM,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,WAAYC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,aAAxB,+DAEf,yBAAKC,UAAWC,IAAMC,OACpB,uCACA,kBAAC,IAAD,CACGC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAEXT,SAAU,SAACU,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,UAClBC,YAAW,WACTZ,EAASU,GAETC,MACC,MAELE,iBAAkBC,MAAaC,MAAM,CACnCT,MAAOQ,MACHR,MAAM,yBACNT,SAAS,YACbU,SAAUO,MACNjB,SAAS,YACTN,IAAI,EAAG,qCAKb,SAACyB,GAAW,IACJC,EAAgBD,EAAhBC,aACP,OACG,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CACGC,KAAK,QACLC,YAAY,QACZC,UAAWC,OAGhB,6BACE,kBAAC,IAAD,CACGH,KAAK,WACLC,YAAY,WACZC,UAAWC,IACXC,KAAK,cAGV,yBAAKpB,UAAWC,IAAMoB,cACpB,kBAAC,IAAD,CAAgBL,KAAK,aACLM,MAAM,cACNC,GAAG,QAGpB1B,GAAc,yBAAK2B,IAAK3B,EAAY4B,IAAI,KACxC5B,GAAc,6BACb,kBAAC,IAAD,CACGmB,KAAK,UACLC,YAAY,UACZC,UAAWC,IACX1B,SAAUE,KAIbI,GAAgB,yBAAKC,UAAWC,IAAMyB,iBACpC,8BAAO3B,IAGX,yBAAKC,UAAWC,IAAM0B,YACpB,4BAAQP,KAAK,SACLQ,SAAUb,GAEfA,EAAe,aAAe,iBAyClCc,uBAPS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,YAAYD,OAC1BlC,WAAYiC,EAAME,YAAYnC,WAC9BE,aAAc+B,EAAME,YAAYjC,gBAIM,CAACG,UAAO+B,gBAAjCJ,EA9BD,SAAC,GAAqE,IAApE3B,EAAmE,EAAnEA,MAAO6B,EAA4D,EAA5DA,OAAQlC,EAAoD,EAApDA,WAAYE,EAAwC,EAAxCA,aAAckC,EAA0B,EAA1BA,WAA0B,2EAEjFC,qBAAU,WACRD,MACC,CAACF,IAWJ,OAAIA,EACK,kBAAC,IAAD,CAAUI,GAAI,aAEhB,yBAAKnC,UAAWC,IAAMC,OAC3B,kBAAC,EAAD,CAAWJ,SAbI,SAACU,GAChBN,EACGM,EAAOJ,MACPI,EAAOH,SACPG,EAAOF,WACPE,EAAOD,UAQqBV,WAAYA,EAAYE,aAAcA","file":"static/js/4.e826ad74.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2TRU6\",\"buttonItem\":\"Login_buttonItem__2vPKc\",\"checkboxItem\":\"Login_checkboxItem__3iKBJ\",\"formCommonError\":\"Login_formCommonError__23-z_\",\"textInput\":\"Login_textInput__3xVn1\",\"error\":\"Login_error__33pNw\",\"inputFeedback\":\"Login_inputFeedback__2ISaD\"};","\r\n//to Form-Redux======================================\r\n// export const required = value => {\r\n//     if (value) return undefined;\r\n//     return \"Field is required\";\r\n// }\r\n\r\nconst maxLength = max => value =>\r\n    value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\nexport const maxLength35 = maxLength(35);\r\n\r\nconst minLength = min => value =>\r\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\r\nexport const minLength2 = minLength(2);\r\nexport const minLength4 = minLength(4);\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined\r\n\r\n\r\n\r\n//to Formik=====================================\r\n\r\nconst validateEmail = (min, max) => value => {\r\n    if (!value) {\r\n        return  'Field is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        return 'Invalid email address';\r\n    } else if (value.length < min) {\r\n        return `Must be ${min} characters or more`\r\n    } else if (value.length > max) {\r\n        return `Must be ${max} characters or less`\r\n    }\r\n}\r\nexport const validateEmail235 = validateEmail(2, 35);\r\n\r\nconst validate = (min, max) => value => {\r\n    if (!value) {\r\n        return  'Field is required';\r\n    } else if (value.length < min) {\r\n        return `Must be ${min} characters or more`\r\n    } else if (value.length > max) {\r\n        return `Must be ${max} characters or less`\r\n    }\r\n}\r\n\r\nexport const validate28 = validate(2, 8);\r\nexport const validate835 = validate(8, 35);\r\n\r\n\r\n\r\n// new to Formik\r\n\r\nexport const required = value => {\r\n    // let error;\r\n    if (!value) {\r\n        return 'Required';\r\n    }\r\n    // return error;\r\n}","import React, {useEffect} from \"react\";\r\nimport style from \"./Login.module.sass\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, resetError} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {required} from \"../../utilities/validators/validators\";\r\nimport {CustomCheckbox, CustomInput} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst LoginForm = ({captchaUrl, onSubmit, errorMessage, ...props}) => (\r\n\r\n   <div className={style.login}>\r\n     <h1>Sign in</h1>\r\n     <Formik\r\n        initialValues={{\r\n          email: '',\r\n          password: '',\r\n          rememberMe: false,\r\n          captcha: ''\r\n        }}\r\n        onSubmit={(values, {resetForm}) => {\r\n          setTimeout(() => {\r\n            onSubmit(values)\r\n            // alert(JSON.stringify(values, null, 2));\r\n            resetForm();\r\n          }, 300)\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string()\r\n             .email('Invalid email address')\r\n             .required('Required'),\r\n          password: Yup.string()\r\n             .required('Required')\r\n             .min(3, 'Must be at least 3 characters'),\r\n          // rememberMe: Yup.boolean()\r\n          //    .oneOf([true], 'You must Checked')\r\n        })}\r\n     >\r\n       {(props) => {\r\n         const {isSubmitting} = props;\r\n         return (\r\n            <Form>\r\n              <div>\r\n                <Field\r\n                   name=\"email\"\r\n                   placeholder=\"email\"\r\n                   component={CustomInput}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Field\r\n                   name=\"password\"\r\n                   placeholder=\"password\"\r\n                   component={CustomInput}\r\n                   type=\"password\"\r\n                />\r\n              </div>\r\n              <div className={style.checkboxItem}>\r\n                <CustomCheckbox name=\"rememberMe\"\r\n                                label=\"Remember Me\"\r\n                                id=\"i3\"\r\n                />\r\n              </div>\r\n              {captchaUrl && <img src={captchaUrl} alt=\"\"/>}\r\n              {captchaUrl && <div>\r\n                <Field\r\n                   name=\"captcha\"\r\n                   placeholder=\"Captcha\"\r\n                   component={CustomInput}\r\n                   validate={required}\r\n                />\r\n              </div>}\r\n              {\r\n                errorMessage && <div className={style.formCommonError}>\r\n                  <span>{errorMessage}</span>\r\n                </div>\r\n              }\r\n              <div className={style.buttonItem}>\r\n                <button type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                >\r\n                  {isSubmitting ? 'Loading...' : 'Log In'}\r\n                </button>\r\n              </div>\r\n            </Form>\r\n         )\r\n       }}\r\n     </Formik>\r\n   </div>\r\n)\r\n\r\n\r\nconst Login = ({login, isAuth, captchaUrl, errorMessage, resetError, ...props}) => {\r\n\r\n  useEffect(() => {\r\n    resetError();\r\n  }, [isAuth])\r\n\r\n  const onSubmit = (values) => {\r\n    login(\r\n       values.email,\r\n       values.password,\r\n       values.rememberMe,\r\n       values.captcha\r\n    )\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={\"/profile\"}/>\r\n  }\r\n  return <div className={style.login}>\r\n    <LoginForm onSubmit={onSubmit} captchaUrl={captchaUrl} errorMessage={errorMessage}/>\r\n  </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.authReducer.isAuth,\r\n  captchaUrl: state.authReducer.captchaUrl,\r\n  errorMessage: state.authReducer.errorMessage,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login, resetError})(Login);"],"sourceRoot":""}